{"version":3,"file":"static/js/565.44d906c3.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/ContactsView.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormContainer = styled.form`\n  // max-width:  '400px';\n  display: 'flex',\n  flex-direction: 'column',\n  align-items: 'center',\n  width:  '400px';\n  border: '1px solid black';\n  padding: '12px';\n`;\n\nexport const InputsContainer = styled.div`\n  margin-bottom: '12px';\n  max-width:  '400px';\n`;\n\nexport const InputAndLabelContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: '12px';\n`;\n\nexport const ErrorText = styled.p`\n  color: 'red';\n`;","import { nanoid } from 'nanoid';\nimport * as yup from 'yup';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport contactsOperations from \"redux/contacts/contacts-operations\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { InputAndLabelContainer, InputsContainer, ErrorText } from './ContactForm.styled';\nimport { Alert, AlertTitle, Button, Paper} from '@mui/material';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  )\n}\n\nexport const ContactForm = () => {\n  const inputNameId = nanoid();\n  const inputNumberId = nanoid();\n  const dispatch = useDispatch();\n  const storeContacts = useSelector(state => state.contacts.items);\n  const [isAddedName, setIsAddedName] = useState(false);\n  const [contactName, setContactName] = useState('');\n\n  const initialValues = {\n    name: '',\n    number: ''\n  }\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newContact = { ...values, id: nanoid() };\n    setContactName(newContact.name);\n    if (storeContacts.find(contact => contact.name.toLowerCase() === newContact.name.toLowerCase())) {\n      setIsAddedName(true);\n    }\n    else {\n      dispatch(contactsOperations.createContact(newContact));\n    }\n    resetForm();\n  }\n  if (isAddedName) {\n    return (\n      <Alert severity=\"warning\" sx={{ width: '500px', margin:'20px auto'}}>\n        <AlertTitle >Warning</AlertTitle>\n        {contactName} is already in contacts\n        <Button style={{ marginLeft: '10px' }} variant=\"contained\" onClick={() => { setIsAddedName(false) }}>Add another name</Button>\n      </Alert>)\n  }\n\n  return (\n    <Paper sx={{\n      padding: '10px', width: '500px', margin: 'auto', backgroundColor: 'secondary.main', display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'stretch',\n      gap: '5px'\n    }}>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <Form>\n          <InputsContainer>\n            <InputAndLabelContainer>\n              <label htmlFor={inputNameId}>Name</label>\n              <Field\n                placeholder='Enter new contact name'\n                style={{\n                  width: '100%',\n                  padding: '10px',\n                  margin: '10px 0',\n                  border: '1px solid grey',\n                  borderRadius: '6px',\n                  backgroundColor: '#ebe2dd',\n                }}                \n                id={inputNameId}\n                autoComplete=\"off\"\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              />\n              <FormError name='name' />\n            </InputAndLabelContainer>\n\n            <InputAndLabelContainer>\n              <label htmlFor={inputNumberId}>Number</label>\n              <Field\n                placeholder='Enter new contact number'\n                style={{\n                  width: '100%',\n                  padding: '10px',\n                  margin: '10px 0',\n                  border: '1px solid grey',\n                  borderRadius: '6px',\n                  backgroundColor: '#ebe2dd',\n                }}\n                id={inputNumberId}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              />\n              <FormError name='number' />\n            </InputAndLabelContainer>\n          </InputsContainer>\n          <Button style={{ width: '100%', padding: '10px' }} variant=\"contained\" type='submit'>Add contact</Button>\n        </Form>\n      </Formik>\n    </Paper>)\n\n}","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\"};","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeFilter } from 'redux/filter/filter-slice';\nimport css from './Filter.module.css';\nimport { Paper } from \"@mui/material\";\n\nexport const Filter = () => {\n  const storeFilter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <Paper sx={{ padding: '10px', width: '500px', margin: 'auto', backgroundColor: 'secondary.main', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <input\n        type=\"text\"\n        placeholder='Enter contact name or a letter'\n        className={css.input}\n        value={storeFilter}\n        onChange={(e) => dispatch(changeFilter(e.currentTarget.value))} />\n    </Paper>\n  )\n}","import styled from '@emotion/styled';\n\n\nexport const ContactContainer = styled.div`\n display: flex;\n justify-content: space-between;\n align-items: center; \n`;\n","import { useDispatch } from 'react-redux';\nimport { ContactContainer } from './ContactItem.styled';\nimport contactsOperations from \"redux/contacts/contacts-operations\";\nimport {Button, Paper, Typography} from '@mui/material';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <Paper sx={{ minWidth: '200px', width: '100%', padding: '10px', backgroundColor: 'secondary.main'}}>\n        <ContactContainer>\n          <Typography variant='h6' style={{ marginRight: '10px' }}>{name} : {number}</Typography>\n          <Button variant=\"contained\" onClick={() => dispatch(contactsOperations.deleteContact(id))}>Delete</Button>\n        </ContactContainer>\n      </Paper>\n      \n    </>)\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport contactsOperations from \"redux/contacts/contacts-operations\";\nimport { ContactItem } from '../ContactItem/ContactItem';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.getContacts());\n  }, [dispatch])\n\n  const storeFilter = useSelector(state => state.filter);\n  const storeContacts = useSelector(state => state.contacts.items);\n\n  const visibleContacts = storeContacts.filter(contact => contact.name.toLowerCase().includes(storeFilter.toLowerCase()));\n  \n  return (\n    <div>\n    {\n      storeContacts.length > 0 && (\n        <ul style={{ listStyle: 'none' }}>\n          {\n            visibleContacts.map(({ name, id, number }) => (\n              <li key={id} style={{ marginBottom: '10px' }}>\n                <ContactItem name={name} id={id} number={number} />\n              </li>))}\n        </ul>\n    )}\n    </div>\n  )\n}\n\n","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Paper, Typography } from \"@mui/material\";\n\nconst ContactsView = () => {\n  return (\n    <div>\n      <Paper sx={{\n        padding: '10px',\n        width: '100%',\n        margin: '20px auto',\n        backgroundColor: '#fff', \n        textAlign: 'center'\n      }}>       \n        <Typography variant='h3'>Add new contact</Typography>\n      </Paper>\n      <ContactForm />\n      <Paper sx={{\n        padding: '10px',\n        width: '100%',\n        margin: '20px auto',\n        backgroundColor: '#fff',\n        textAlign: 'center'\n      }}>\n        <Typography variant='h3'>Find contacts by name</Typography>\n       \n      </Paper>\n      <Filter />\n      <ContactList />\n    </div>\n  )\n}\n\nexport default ContactsView;"],"names":["InputsContainer","styled","InputAndLabelContainer","ErrorText","schema","yup","shape","name","required","number","FormError","render","message","ContactForm","inputNameId","nanoid","inputNumberId","dispatch","useDispatch","storeContacts","useSelector","state","contacts","items","useState","isAddedName","setIsAddedName","contactName","setContactName","Alert","severity","sx","width","margin","AlertTitle","Button","style","marginLeft","variant","onClick","Paper","padding","backgroundColor","display","flexDirection","alignItems","gap","initialValues","onSubmit","values","resetForm","newContact","id","find","contact","toLowerCase","contactsOperations","validationSchema","htmlFor","placeholder","border","borderRadius","autoComplete","type","pattern","title","Filter","storeFilter","filter","className","css","value","onChange","e","changeFilter","currentTarget","ContactContainer","ContactItem","minWidth","Typography","marginRight","ContactList","useEffect","visibleContacts","includes","length","listStyle","map","marginBottom","textAlign"],"sourceRoot":""}