{"version":3,"file":"static/js/420.7902b989.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/ContactsView.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\n\nexport const FormContainer = styled.div`\n  width:  ${props => props.theme.spacing(100)};\n  border: ${(props) => `1px solid ${props.theme.colors.black}`};\n  padding: ${props => props.theme.spacing(3)};\n`;\n\nexport const InputsContainer = styled.div`\n  margin-bottom: ${props => props.theme.spacing(3)};\n`;\n\nexport const InputAndLabelContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: ${props => props.theme.spacing(3)};\n`;\n\nexport const ErrorText = styled.p`\n  color: ${props => props.theme.colors.red};\n`;","import { nanoid } from 'nanoid';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport contactsOperations from \"redux/contacts/contacts-operations\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { FormContainer, InputAndLabelContainer, InputsContainer, ErrorText } from './ContactForm.styled';\n// import Alert from '@mui/material/Alert';\nimport { Alert } from '@mui/material';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  )\n}\n\nexport const ContactForm = () => {\n  const inputNameId = nanoid();\n  const inputNumberId = nanoid();\n  const dispatch = useDispatch();\n  const storeContacts = useSelector(state => state.contacts.items);\n\n  const initialValues = {\n    name: '',\n    number: ''\n  }\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newContact = { ...values, id: nanoid() }\n    if (storeContacts.find(contact => contact.name.toLowerCase() === newContact.name.toLowerCase())) {\n      // alert(`${newContact.name} is already in contacts`);\n      <Alert severity=\"warning\">\n        {/* <AlertTitle>Warning</AlertTitle> */}\n        This is a warning alert — <strong>check it out!</strong>\n      </Alert>\n    }\n    else {\n      dispatch(contactsOperations.createContact(newContact));\n    }\n    resetForm();\n  }\n\n  return (\n    <FormContainer >\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <Form>\n          <InputsContainer>\n            <InputAndLabelContainer>\n              <label htmlFor={inputNameId}>Name</label>\n              <Field\n                id={inputNameId}\n                autoComplete=\"off\"\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              />\n              <FormError name='name' />\n            </InputAndLabelContainer>\n\n            <InputAndLabelContainer>\n              <label htmlFor={inputNumberId}>Number</label>\n              <Field\n                id={inputNumberId}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              />\n              <FormError name='number' />\n            </InputAndLabelContainer>\n          </InputsContainer>\n          <button type='submit'>Add contact</button>\n        </Form>\n      </Formik>\n    </FormContainer>\n  )\n}","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeFilter } from 'redux/filter/filter-slice';\n\nexport const Filter = () => {\n  const storeFilter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <p> Find contacts by name</p>\n      <input\n        type=\"text\"\n        value={storeFilter}\n        onChange={(e) => dispatch(changeFilter(e.currentTarget.value))} />\n    </>\n  )\n}","import { useDispatch } from 'react-redux';\nimport contactsOperations from \"redux/contacts/contacts-operations\";\nimport Button from '@mui/material/Button';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <span style={{ marginRight: '10px' }}>{name} : {number}</span>\n      <button onClick={() => dispatch(contactsOperations.deleteContact(id))}>Delete</button>\n      <Button variant=\"contained\">Hello World</Button>\n    </>)\n}\n","import React, { useEffect } from \"react\";\nimport {  useDispatch, useSelector } from \"react-redux\";\nimport contactsOperations from \"redux/contacts/contacts-operations\";\nimport { ContactItem } from '../ContactItem/ContactItem';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.getContacts());\n  }, [dispatch])\n\n  const storeFilter = useSelector(state => state.filter);\n  const storeContacts = useSelector(state => state.contacts.items);\n\n  const visibleContacts = storeContacts.filter(contact => contact.name.toLowerCase().includes(storeFilter.toLowerCase()));\n  \n  return (\n    <div>\n    {\n      storeContacts.length > 0 && (\n        <ul style={{ listStyle: 'none' }}>\n          {\n            visibleContacts.map(({ name, id, number }) => (\n              <li key={id} style={{ marginBottom: '10px' }}>\n                <ContactItem name={name} id={id} number={number} />\n              </li>))}\n        </ul>\n    )}\n    </div>\n  )\n}\n\n","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\n\nconst ContactsView = () => {\n  return (\n    <div>\n      <h2>Book of contacts</h2>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  )\n}\n\nexport default ContactsView;"],"names":["FormContainer","styled","props","theme","spacing","colors","black","InputsContainer","InputAndLabelContainer","ErrorText","red","schema","yup","shape","name","required","number","FormError","render","message","ContactForm","inputNameId","nanoid","inputNumberId","dispatch","useDispatch","storeContacts","useSelector","state","contacts","items","initialValues","onSubmit","values","resetForm","newContact","id","find","contact","toLowerCase","Alert","contactsOperations","validationSchema","htmlFor","autoComplete","type","pattern","title","Filter","storeFilter","filter","value","onChange","e","changeFilter","currentTarget","ContactItem","style","marginRight","onClick","Button","variant","ContactList","useEffect","visibleContacts","includes","length","listStyle","map","marginBottom"],"sourceRoot":""}